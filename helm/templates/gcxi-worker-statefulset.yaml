{{ if eq (.Values.gcxi.deployment.deployMain | default false) true }}
{{ if eq (.Values.gcxi.deployment.deployWorkloads | default false) true }}
# we keep this Servcie in the StatefulSet file, as it's a mandatory part of SS deployment
apiVersion: v1
kind: Service
metadata:
  labels:
    {{- include "gcxi.labels" . | nindent 4 }}
  name: {{ .Values.gcxi.svc.worker.domain }}{{ template "deploymentCode" . }}
  namespace: {{ .Values.gcxi.app.namespace }}
spec:
  clusterIP: None
  ports:
  {{- range $key, $value := .Values.gcxi.ports.worker }}
  - name: {{ $key }}
    port: {{ $value }}
  {{- end }}
  selector:
    gcxi/app: gcxi-worker{{ template "deploymentCode" . }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    {{- include "gcxi.labels" . | nindent 4 }}
  name: gcxi{{ template "deploymentCode" . }}
  namespace: {{ .Values.gcxi.app.namespace }}
spec:
  replicas: {{ .Values.gcxi.replicas.worker }}
  selector:
    matchLabels:
      gcxi/app: gcxi-worker{{ template "deploymentCode" . }}
  serviceName: {{ .Values.gcxi.svc.worker.domain }}{{ template "deploymentCode" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/gcxi-configmap.yaml") . | sha256sum }}
        {{- if eq (.Values.gcxi.deployment.deployRandomSecrets | default false) false }}
        checksum/config: {{ include (print $.Template.BasePath "/gcxi-secret.yaml") . | sha256sum }}
        {{- end }}
      labels:
        {{- include "gcxi.labels" . | nindent 8 }}
        gcxi/app: gcxi-worker{{ template "deploymentCode" . }}
        gcxi/deployment-code: gcxi{{ template "deploymentCode" . }}
        gcxi/global-code: gcxi{{ template "globalCode" . }}
        gcxi/role: gcxi-worker
        {{- with .Values.gcxi.labels }}
        {{- range $key, $value := $.Values.gcxi.labels.worker }}
        {{$key}}: {{$value}}
        {{- end }}
        {{- end }}
      namespace: "{{ .Values.gcxi.app.namespace }}"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: gcxi/role
                  operator: In
                  values:
                  - gcxi-worker
              topologyKey: {{ .Values.gcxi.podAntiAffinity.topologyKey }}
            weight: 100
      # https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
      # DirectoryOrCreate
      # If nothing exists at the given path, an empty directory will be created there as needed with permission set to 0755, having the same group and ownership with Kubelet.
      # kubelet is running under root
      # so we need an initContainer with root user to set proper permissions for our main user (uid=500)
      {{- if eq (.Values.gcxi.deployment.useHostPathLogInitContainer | default false) true }}
      initContainers:
      - name: init
        command: ['sh', '-c', '{{ template "mountSetupCmd" . }}']
        image: {{ tpl .Values.gcxi.images.init . }}
        volumeMounts:
        - name: gcxi-log
          mountPath: {{ .Values.gcxi.pvc.log.hostPath }}
      {{- end}}
      containers:
      - name: gcxi
        command: ["/genesys/gcxi/mstr_start.sh"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_MOUNT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['gcxi/deployment-code']
        envFrom:
        - configMapRef:
            name: gcxi-config{{ template "deploymentCode" . }}
            optional: true
        - configMapRef:
            name: gcxi-config-ext{{ template "deploymentCode" . }}
            optional: true
        {{- range $cm := .Values.gcxi.configMaps }}
        - configMapRef:
            name: {{ tpl $cm.name $ }}
            optional: true
        {{- end }}
        image: "{{ template "imageRepo" . }}{{ .Values.gcxi.images.gcxi.worker }}:{{ template "gcxiVersion" . }}"
        imagePullPolicy: {{ .Values.gcxi.imagePullPolicy.worker }}
        {{- with .Values.gcxi.lifecycle.worker }}
        lifecycle: {{ toYaml . | nindent 10 }}
        {{- end}}
        {{- with .Values.gcxi.probes.worker.livenessProbe }}
        livenessProbe: {{ toYaml . | nindent 10 }}
        {{- end}}
        ports:
        {{- range $key, $value := .Values.gcxi.ports.worker }}
        - containerPort: {{ $value }}
          name: {{ $key }}
        {{- end }}
        {{- with .Values.gcxi.probes.worker.readinessProbe }}
        readinessProbe: {{ toYaml . | nindent 10 }}
        {{- end}}
        {{- with .Values.gcxi.resources.worker }}
        resources: {{ toYaml . | nindent 10 }}
        {{- end}}
        securityContext:
          runAsGroup: {{ .Values.gcxi.securityContext.worker.runAsGroup }}
          runAsUser: {{ .Values.gcxi.securityContext.worker.runAsUser }}
        volumeMounts: {{- .Values.gcxi.volumeMounts.worker | toYaml | nindent 8 }}
          {{- include "mntSecretGCXI" . | indent 8 }}
          {{- include "mntSecretGIM" . | indent 8 }}
          {{- include "mntSecretGWS" . | indent 8 }}
          {{- include "mntSecretIWD" . | indent 8 }}
          {{- include "mntSecretMSTRLicense" . | indent 8 }}
          {{- include "mntSecretPG" . | indent 8 }}
      dnsConfig:
        {{- with .Values.gcxi.dnsConfig.options }}
        options: {{ toYaml . | nindent 10 }}
        {{- end}}
        searches:
        - {{ .Values.gcxi.svc.worker.domain }}{{ template "deploymentCode" . }}.{{ .Values.gcxi.app.namespace }}.svc.cluster.local
        {{- with .Values.gcxi.dnsConfig.searches }}
        {{ toYaml . }}
        {{- end}}
      hostIPC: {{ .Values.gcxi.deployment.hostIPC }}
      {{- if .Values.gcxi.imagePullSecrets }}
      imagePullSecrets:
      {{- range $key := .Values.gcxi.imagePullSecrets }}
      - name: {{ $key }}
      {{- end }}
      {{- else if .Values.gcxi.imageCredentials }}
      imagePullSecrets:
      - name: {{ .Values.gcxi.imageCredentials.name }}{{ template "deploymentCode" . }}
      {{- end }}
      {{- with .Values.gcxi.nodeSelectors.worker }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.gcxi.priorityClassName }}
      priorityClassName: {{ .Values.gcxi.priorityClassName }}
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.gcxi.securityContext.worker.fsGroup }}
      {{- with .Values.gcxi.serviceAccount.worker }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.gcxi.terminationGracePeriodSeconds }}
      {{- with .Values.gcxi.tolerations.worker }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: gcxi-log
        {{- if eq (.Values.gcxi.deployment.useHostPathLogPV | default false) true }}
        hostPath:
          path: {{ .Values.gcxi.pvc.log.hostPath }}
        {{- else }}
        persistentVolumeClaim:
          claimName: gcxi-log-pvc{{ template "deploymentCode" . }}
        {{- end }}
      - name: gcxi-saml
        configMap:
          name: gcxi-saml{{ template "deploymentCode" . }}
          optional: true
      - name: gcxi-share
        persistentVolumeClaim:
          claimName: gcxi-share-pvc{{ template "deploymentCode" . }}
      - name: gcxi-var
        projected:
          sources:
          - secret:
              name: gcxi-secret{{ template "deploymentCode" . }}
              optional: true
          - secret:
              name: gcxi-secret-ext{{ template "deploymentCode" . }}
              optional: true
          {{- range $secret := .Values.gcxi.secrets }}
          - secret:
              name: {{ tpl $secret.name $ }}
              {{- with $secret.items }}
              items:
              {{- range $item := $secret.items }}
              - key: {{ tpl $item.key $ }}
                path: {{ tpl $item.path $ }}
              {{- end }}
              {{- end }}
              optional: true
          {{- end }}
      {{- include "csiSecretGCXI" . | indent 6 }}
      {{- include "csiSecretGIM" . | indent 6 }}
      {{- include "csiSecretGWS" . | indent 6 }}
      {{- include "csiSecretIWD" . | indent 6 }}
      {{- include "csiSecretMSTRLicense" . | indent 6 }}
      {{- include "csiSecretPG" . | indent 6 }}
  {{- if eq (.Values.gcxi.deployment.useDynamicLogPV | default false) true }}
  # volumeClaimTemplates may be used only with dynamically provisioned volumes
  volumeClaimTemplates:
  - metadata:
      labels:
        {{- include "gcxi.labels" . | nindent 8 }}
      name: gcxi-log
      namespace: {{ .Values.gcxi.app.namespace }}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: {{ .Values.gcxi.pvc.log.capacity }}
      storageClassName: {{ .Values.gcxi.pvc.log.storageClassName }}
  {{- end }}
{{- end }}
{{- end }}
